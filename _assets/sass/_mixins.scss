// Modular scaled
// returns value in embeds
@function ms($exponent) {
	// ratio via http://www.modularscale.com/?1&em&1.25
	$value: 1;
	$ratio: 1.25;

	@if $exponent > 0 {
		@for $i from 1 through $exponent {
			$value: $value * $ratio;
		}
	} @else if $exponent < 0 {
		@for $i from 1 through -$exponent {
			$value: $value / $ratio;
		}
	}
	$value: $value * 1em;

	@return $value;
}


// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
	font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
	width: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}

// Lighten a color via Color + white
// @access public
// @param {Color} $color - color to tint
// @param {Number} $percentage - percentage of `$color` in returned color
// @return {Color}
@function tint($color, $percentage) {
	@return mix(white, $color, $percentage);
}

// darken a color via Color + black
// @access public
// @param {Color} $color - color to shade
// @param {Number} $percentage - percentage of `$color` in returned color
// @return {Color}
@function shade($color, $percentage) {
	@return mix(black, $color, $percentage);
}
